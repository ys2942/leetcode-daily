# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def dfs(self,root,voyage):
        if not root:
            return True
        if root.val!=voyage[self.k]:
            return False
        self.k+=1
        if root.left and root.left.val==voyage[self.k]:
            return self.dfs(root.left,voyage) and self.dfs(root.right,voyage)
        elif root.right and root.right.val==voyage[self.k]:
            if root.left:
                self.ans.append(root.val)
            return self.dfs(root.right,voyage) and self.dfs(root.left,voyage)
        return not root.left and not root.right
    
    def flipMatchVoyage(self, root: TreeNode, voyage: List[int]) -> List[int]:
        self.k=0
        self.ans=[]
        if self.dfs(root,voyage):
            return self.ans
        else:
            return [-1]
#https://blog.csdn.net/jianyingyao7658/article/details/86140125?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7Edefault-2.control&dist_request_id=1329187.15465.16179087932936065&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EOPENSEARCH%7Edefault-2.control
        
