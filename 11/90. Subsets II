class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        def dfs(depth,start,valuelist):
            if valuelist not in res:
                res.append(valuelist)
            if depth==len(nums):
                return
            for i in range(start,len(nums)):
                dfs(depth+1,i+1,valuelist+[nums[i]])
        nums.sort()
        res=[]
        dfs(0,0,[])
        return res
#https://blog.csdn.net/yangjingjing9/article/details/77012254


class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()
        path = []
        self.dfs(nums, res, path, 0)
        return res
    
    def dfs(self, nums, res, path, index):
        res.append(path[:])
        for i in range(index, len(nums)):
            if i > index and nums[i]==nums[i-1]:
                continue
            path.append(nums[i])
            self.dfs(nums, res, path, i+1)
            path.pop()
