class Solution:
    def numOfWays(self, nums: List[int]) -> int:
        dp=[[1 for r in range(len(nums))] for l in range(len(nums))]
        for i in range(1,len(nums)):
            for j in range(1,len(nums)):
                dp[i][j]=dp[i][j-1]+dp[i-1][j]
        return (self.getNum(nums,dp)-1)%(10**9+7)
    
    def getNum(self,nums,dp):
        if len(nums)<=2:
            return 1
        left,right=[num for num in nums if num<nums[0]],[num for num in nums if num>nums[0]]
        return (self.getNum(left,dp)*dp[len(left)][len(right)]*self.getNum(right,dp))
#https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/discuss/820884/Python-short-DP
