class UnionFind:
    def __init__(self, n):
        self.parents = [i for i in range(n+1)]
        self.ranks = [0]*(n+1)
        
    def find(self, x):
        if x!= self.parents[x]:
            self.parents[x] = self.find(self.parents[x])
        return self.parents[x]
    
    def union(self, x, y):
        root_x, root_y = self.find(x), self.find(y)
        if self.ranks[root_x]<self.ranks[root_y]:
            self.parents[root_x] = root_y
        elif self.ranks[root_x]>self.ranks[root_y]:
            self.parents[root_y] = root_x
        else:
            self.parents[root_x] = root_y
            self.ranks[root_y]+=1

class Solution:
    def largestComponentSize(self, nums: List[int]) -> int:
        nums_set = set(nums)
        max_num = max(nums)
        uf = UnionFind(max_num)
        is_prime = [True for _ in range(max_num + 1)]
        for num in range(2, max_num + 1):
            if is_prime[num]:
                for composite in range(num, max_num + 1, num):
                    if composite != num:
                        is_prime[composite] = False
                    if composite in nums_set:
                        uf.union(num, composite)
        cluster_to_cnt = collections.defaultdict(int)
        for num in nums:
            cluster_to_cnt[uf.find(num)]+=1
        return max([cnt for _,cnt in cluster_to_cnt.items()])
#https://leetcode.com/problems/largest-component-size-by-common-factor/discuss/1445730/Python-union-find-%2B-Sieve-Of-Eratosthenes
#虽然这个题是hard题目，但是如果想明白了，很简单。任何两个数之间有相同的因子，就连接到一起，换句话说，可以把每个数字和它的所有因子进行链接，最后统计哪个因子上面的数字最多即可。
#所以使用的方法是并查集，但是并不是把数组里面的两个元素进行合并，而是把每个数字和它所有的因子进行union。最后统计的数字也是某个因子上面的链接的数字的个数，因为这就是一条链的意思
#https://blog.csdn.net/fuxuemingzhu/article/details/85015411
        
