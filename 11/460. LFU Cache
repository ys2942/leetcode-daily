class LFUCache:

    def __init__(self, capacity: int):
        self.c,self._count=capacity,0
        self.keys={}

    def get(self, key: int) -> int:
        self._count+=1
        if key in self.keys:
            self.keys[key][1]+=1
            self.keys[key][2]=self._count
            return self.keys[key][0]
        else:
            return -1

    def put(self, key: int, value: int) -> None:
        self._count+=1
        if self.c==0:
            return 
        if key not in self.keys:
            if len(self.keys)>=self.c:
                min_keys=[]
                min_fre=self.keys[min(self.keys,key=lambda x:self.keys[x][1])][1]
                for k in self.keys:
                    if self.keys[k][1]==min_fre:
                        min_keys.append(k)
                    min_time,least_key=1e8,0
                for k in min_keys:
                    if self.keys[k][2]<min_time:
                        min_time=self.keys[k][2]
                        least_key=k
                del self.keys[least_key]
            self.keys[key]=[value,1,self._count]
        else:
            self.keys[key][0]=value
            self.keys[key][1]+=1
            self.keys[key][2]=self._count
#https://blog.csdn.net/Xenonon/article/details/105337175?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.add_param_isCf&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.add_param_isCf

# Your LFUCache object will be instantiated and called as such:
# obj = LFUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
