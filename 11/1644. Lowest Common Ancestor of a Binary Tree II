# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.find_count=0
        def dfs(root,p,q):
            if root is None:
                return None
            find_left=dfs(root.left,p,q)
            find_right=dfs(root.right,p,q)            
            if root.val==p.val or root.val==q.val:
                self.find_count+=1
                return root
            if find_left is not None and find_right is not None:
                return root
            return find_left or find_right
        
        lca=dfs(root,p,q)
        if self.find_count<2:
            return None
        return lca
        
