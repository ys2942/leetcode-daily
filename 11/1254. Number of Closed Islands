class Solution:
    def closedIsland(self, grid: List[List[int]]) -> int:
        if not grid:
            return 0
        m = len(grid)
        n = len(grid[0])
        cnt = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j]==0:
                    if not self.dfs(grid, i, j, m, n):
                        cnt += 1
        return cnt

#    # 如果触碰到边界return True， else False
    
    def dfs(self, grid, i, j, m, n):
        if i==0 or i == m-1 or j==0 or j == n-1:
            return True
        res = False
        grid[i][j]=1
        directions = [(0,1), (0,-1),(1,0),(-1,0)]
        for dir in directions:
            di,dj = i+dir[0],j+dir[1]
            if grid[di][dj]==0:
                res = self.dfs(grid, di, dj, m, n) or res
        return res
        
                    
