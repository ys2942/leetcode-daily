class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        N=len(nums)
        l,r,s,cnt,res=0,N-1,0,0,float('inf')
        while l<N and s+nums[l]<=x:
            s+=nums[l]
            l+=1
            cnt+=1
            if s==x:
                res=min(res,cnt)
        if l==N and s<x:
            return -1
        l-=1
        while r>=0:
            cnt+=1
            s+=nums[r]
            while l>=0 and s>x:
                cnt-=1
                s-=nums[l]
                l-=1
            if s==x:
                res=min(res,cnt)
            r-=1
        return -1 if res==float('inf') else res

#https://zhuanlan.zhihu.com/p/301031591
#从给定数组左边和右边取连续的数，问最少的取数个数能让和等于x。问题可以转化为找最长子数组使得和为sum - x =>动态窗口。也可以看成左右此消彼长的过程，两个指针先让左边的尽量取直到取到x，之后再从右边开始取，每次取一个数后将左边指针退到左右总和不超过x的位置，以此类推直到右指针往前走完所有可能的位置，是形式稍微特别些的动态窗口。
