class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        self.dfs(board)
        
    def check(self,x,y,board):
        tmp=board[x][y]
        board[x][y]='.'
        for row in range(9):
            if board[row][y]==tmp:
                return False
        for col in range(9):
            if board[x][col]==tmp:
                return False
        for row in range(3):
            for col in range(3):
                if board[(x//3)*3+row][(y//3)*3+col]==tmp:
                    return False
        board[x][y]=tmp
        return True

    def dfs(self,board):
        for row in range(9):
            for col in range(9):
                if board[row][col]=='.':
                    for char in '123456789':
                        board[row][col]=char
                        if self.check(row,col,board) and self.dfs(board):
                            return True
                        board[row][col]='.'
                    return False
        return True
#https://blog.csdn.net/hyperbolechi/article/details/44668647
#对于每个需要填数字的格子带入1到9，每代入一个数字都判定其是否合法，如果合法就继续下一次递归，结束时把数字设回 '.'，判断新加入的数字是否合法时，只需要判定当前数字是否合法，不需要判定这个数组是否为数独数组，因为之前加进的数字都是合法的，这样可以使程序更加高效一些，整体思路是这样的，但是实现起来可以有不同的形式。一种实现形式是递归带上横纵坐标，由于是一行一行的填数字，且是从0行开始的，所以当i到达9的时候，说明所有的数字都成功的填入了，直接返回 ture。当j大于等于9时，当前行填完了，需要换到下一行继续填，则继续调用递归函数，横坐标带入 i+1。否则看若当前数字不为点，说明当前位置不需要填数字，则对右边的位置调用递归。若当前位置需要填数字，则应该尝试填入1到9内的所有数字，让c从1遍历到9，每当试着填入一个数字，都需要检验是否有冲突，使用另一个子函数 isValid 来检验是否合法，假如不合法，则跳过当前数字。若合法，则将当前位置赋值为这个数字，并对右边位置调用递归，若递归函数返回 true，则说明可以成功填充，直接返回 true。不行的话，需要重置状态，将当前位置恢复为点。若所有数字都尝试了，还是不行，则最终返回 false。检测当前数组是否合法的原理跟之前那道 Valid Sudoku 非常的相似，但更简单一些，因为这里只需要检测新加入的这个数字是否会跟其他位置引起冲突，分别检测新加入数字的行列和所在的小区间内是否有重复的数字即可，
