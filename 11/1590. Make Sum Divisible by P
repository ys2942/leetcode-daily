class Solution:
    def minSubarray(self, nums: List[int], p: int) -> int:
        target=sum(nums)%p
        if target==0:
            return 0
        d={0:-1}
        n=len(nums)
        cur=0
        res=n
        for i in range(n):
            cur=(cur+nums[i])%p 
            if d.get((cur-target)%p) is not None:
                res=min(res,i-d.get((cur-target)%p))
            d[cur]=i
        if res<n:
            return res
        return -1
#如果某个子数组的和对p的余数也是mod，那么移除它之后即可完成任务，剩余数组可以整除p
#我们使用一个哈希表来保存某个前缀和余数最近出现的位置，hashmap[0]=-1，这个是为了考虑从头开始的情况，计算长度时候要+1。
#https://blog.csdn.net/weixin_43422466/article/details/108726394
#https://blog.csdn.net/w5688414/article/details/109152721
