class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        m=len(s1)
        n=len(s2)
        s=len(s3)
        if m+n!=s:
            return False
        dp=[[False]*(n+1) for _ in range(m+1)]
        dp[0][0]=True
        for i in range(1,m+1):
            if dp[i-1][0] and s1[i-1]==s3[i-1]:
                dp[i][0]=True
        for i in range(1,n+1):
            if dp[0][i-1] and s2[i-1]==s3[i-1]:
                dp[0][i]=True
        for i in range(1,m+1):
            for j in range(1,n+1):
                if (dp[i-1][j] and s1[i-1]==s3[i+j-1]) or (dp[i][j-1] and s2[j-1]==s3[i+j-1]):
                    dp[i][j]=True
        return dp[m][n]
#动态规划：dp[i][j]表示s1[0...i-1]和s2[0...j-1]是否可以拼接为s3[0...i+j-1]，可以拼接为true，不可以拼接为false
#https://www.cnblogs.com/slurm/p/5221580.html
#https://blog.csdn.net/l141210113/article/details/89424326
