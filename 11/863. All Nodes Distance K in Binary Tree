# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, K: int) -> List[int]:
        conn=collections.defaultdict(list)
        def connect(parent,child):
            if parent and child:
                conn[parent.val].append(child.val)
                conn[child.val].append(parent.val)
            if child.left:
                connect(child,child.left)
            if child.right:
                connect(child,child.right)
        connect(None,root)
        
        que=collections.deque() #A deque is a double-ended queue. 
        que.append(target.val)
        visited=set([target.val])
        for k in range(K):
            size=len(que)
            for i in range(size):
                node=que.popleft()
                for j in conn[node]:
                    if j not in visited:
                        que.append(j)
                        visited.add(j)
        return list(que)
#https://blog.csdn.net/fuxuemingzhu/article/details/82709619?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase
