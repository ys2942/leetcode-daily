class Solution:
    def numSquarefulPerms(self, nums: List[int]) -> int:
        l = len(nums)
        A = collections.Counter(nums)
        num = list(A.keys())
        dic = {}
        for i in range(len(num)):
            if A[num[i]]>1 and int(sqrt(2*num[i]))**2==2*num[i]:
                dic[num[i]] = dic.get(num[i],[]) + [num[i]]
            for j in range(i+1, len(num)):
                if int(sqrt(num[i]+num[j]))**2==num[i]+num[j]:
                    dic[num[i]] = dic.get(num[i],[]) + [num[j]]
                    dic[num[j]] = dic.get(num[j],[]) + [num[i]]
        self.res = 0
        
        def helper(cur, counter):
            if counter == l:
                self.res += 1
                return
            for j in dic.get(cur,[]):
                if A[j]:
                    A[j] -= 1
                    helper(j, counter+1)
                    A[j] += 1
        for i in num:
            A[i] -= 1
            helper(i, 1)
            A[i] += 1
        return self.res
    
    #https://blog.csdn.net/tomwillow/article/details/87559206?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1.control
    
