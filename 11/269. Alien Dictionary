class Solution:
    def alienOrder(self, words: List[str]) -> str:
        from collections import defaultdict,Counter,deque
        adj_list = defaultdict(set)
        in_degree = {c : 0 for word in words for c in word}

        for first_word, second_word in zip(words, words[1:]):
            if len(first_word)>len(second_word) and first_word[:len(second_word)]==second_word:
                return '' 

            for c, d in zip(first_word, second_word):
                if c != d:
                    if d not in adj_list[c]:
                        adj_list[c].add(d)
                        in_degree[d] += 1
                    break

        output = []
        queue = deque([c for c in in_degree if in_degree[c] == 0])
        while queue:
            c = queue.popleft()
            output.append(c)
            for d in adj_list[c]:
                in_degree[d] -= 1
                if in_degree[d] == 0:
                    queue.append(d)

        if len(output) < len(in_degree):
            return ""
        return "".join(output)
