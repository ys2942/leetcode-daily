class Solution:
    def shortestPathAllKeys(self, grid: List[str]) -> int:
        k=0
        m,n=len(grid),len(grid[0])
        for i in range(m):
            for j in range(n):
                if grid[i][j]=='@':
                    start=(i,j)
                elif grid[i][j].islower():
                    k+=1
        
        q=[(0,start[0],start[1],0)]
        seen={(start[0],start[1],0)}
        
        while q:
            steps,x,y,state=heapq.heappop(q)
            if state==(1<<k)-1:
                return steps
            for dx,dy in[(0,-1),(0,1),(1,0),(-1,0)]:
                nx,ny=x+dx,y+dy
                if 0<=nx<m and 0<=ny<n and grid[nx][ny]!='#':
                    if grid[nx][ny].isupper() and not (state & (1<<(ord(grid[nx][ny].lower())-ord('a')))):
                        continue
                    ns=state|(1<<(ord(grid[nx][ny].lower())-ord('a'))) if ord(grid[nx][ny].lower())>=ord('a') else state
                    if (nx,ny,ns) not in seen:
                        seen.add((nx,ny,ns))
                        heapq.heappush(q,(steps+1,nx,ny,ns))
        return -1
