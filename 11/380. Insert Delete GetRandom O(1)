class RandomizedSet:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.nums,self.pos=list(),dict()
        

    def insert(self, val: int) -> bool:
        """
        Inserts a value to the set. Returns true if the set did not already contain the specified element.
        """
        if val not in self.pos:
            self.nums.append(val)
            self.pos[val]=len(self.nums)-1
            return True
        return False
        
        

    def remove(self, val: int) -> bool:
        """
        Removes a value from the set. Returns true if the set contained the specified element.
        """
        if val in self.pos:
            idx,last=self.pos[val],self.nums[-1]
            self.nums[idx]=last
            self.pos[last]=idx
            self.nums.pop()
            self.pos.pop(val)
            return True
        return False
        

    def getRandom(self) -> int:
        """
        Get a random element from the set.
        """
        idx=random.randint(0,len(self.nums)-1)
        return self.nums[idx]
#参考了一下，发现可以使用字典保存每个元素出现的位置，那么和list结合之后，每次移除一个元素的方式是把list结尾元素对要被移除元素出现的位置进行原地替换，这样就能把时间复杂度降下来。
###如果list删除某个位置的元素，那么时间复杂度是O(N)，但是如果用最后的元素对该位置进行替换，并且移除最后的元素，时间复杂度能降到O(1)。
#特别注意骚操作都在remove里面的，注意位置替换，以及别忘记把list和dict中要移除的元素删除。
#https://www.geeksforgeeks.org/python-dictionary-pop-method/
#https://www.geeksforgeeks.org/python-randint-function/

# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()
