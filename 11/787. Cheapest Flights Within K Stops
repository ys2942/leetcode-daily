class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:
        graph=collections.defaultdict(dict)
        for u,v,e in flights:
            graph[u][v]=e
        ans=float('inf')
        que=collections.deque()
        que.append((src,0))
        step=0
        while que:
            size=len(que)
            for i in range(size):
                cur,cost=que.popleft()
                if cur==dst:
                    ans=min(ans,cost)
                for v,w in graph[cur].items():
                    if cost+w>ans:
                        continue
                    que.append((v,cost+w))
            if step>K:
                break
            step+=1
        return -1 if ans==float('inf') else ans
#如果给定步数的情况下，一个更直接的方法就是BFS，这样就可以直接判断在指定的k步以内能不能走到dst，不会进行更多的搜索了，因此这个方法要快很多。

#BFS是个模板，直接使用一个队列很容易就实现了。这个队列存放的是当我们进行第step次搜索时，搜索到的当前的节点，以及走到当前节点的花费。所以当当前节点走到dst时，更新最小花费。

#时间复杂度是O(KN)，空间复杂度是O(N).打败了60%的提交。
#https://blog.csdn.net/fuxuemingzhu/article/details/83307822
