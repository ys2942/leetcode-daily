class Solution:
    def minSkips(self, dist: List[int], speed: int, hoursBefore: int) -> int:
        if not speed or not hoursBefore:
            return -1
        if not dist:
            return 0
        eps = 10e-9 #eps用于避免浮点数计算误差导致向上取整后出现错误
        n=len(dist)
        dp = [[0]*n for _ in range(n+1)]
        for i in range(1, n+1):
            dp[i][0] = math.ceil(dp[i-1][0]+dist[i-1]/speed - eps)
            for j in range(1, n):
                dp[i][j]=min(dp[i-1][j-1]+dist[i-1]/speed - eps, math.ceil(dp[i-1][j]+dist[i-1]/speed-eps))
        for k, t in enumerate(dp[-1]):
            if t<=hoursBefore:
                return k
        return -1
    
#需要注意的是，由于浮点数计算及向上取整可能产生误差，需进行专门处理，详见浮点数运算的细节。
#dp[i][j] 表示途径 i 条道路跳过 j 次休息情况下的最小用时，遍历过程中根据上一道路是否休息选取最小值，结合状态转移方程求解。
#http://www.qishunwang.net/news_show_151556.aspx
