#664. Strange Printer
class Solution:
    def strangePrinter(self, s: str) -> int:
        if not s:
            return 0
        n = len(s)
        dp = [[0]*n for i in range(n)]
        for i in reversed(range(n)):
            for j in range(i,n):
                if i==j:
                    dp[i][j] = 1
                else:
                    dp[i][j] = dp[i][j-1]+1
                    for k in range(i,j):
                        if s[k] == s[j]:
                            dp[i][j] = min(dp[i][j],dp[i][k]+dp[k+1][j-1])
        return dp[0][-1]
#动态规划是解决字符串问题的常规思路。这里使用的方法是区间DP。
#首先，我们先把第一个字符打印了，后边的字符要么和第前边某个字符一起打印，要么单独打印；
#如果和前边的字符一起打印，后边的字符不占用打印次数，但是源字符串被拆分成两段
