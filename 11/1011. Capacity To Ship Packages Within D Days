class Solution:
    def shipWithinDays(self, weights: List[int], D: int) -> int:
        l=max(weights)
        r=sum(weights)
        while l<=r:
            mid=l+(r-l)//2
            need=1
            cur=0
            for w in weights:
                if cur+w>mid:
                    need+=1
                    cur=0
                cur+=w
            if need>D:
                l=mid+1
            else:
                r=mid-1
        return l
#（1）和值的取值范围为[w的最大值，w的所有元素的和]，该范围是闭区间；

#（2）这个范围是给连续递增区间，那么可以采用二分查找来确定；

#（3）二分的条件：如果按照当前取值，得到的分组数量大于d，那么说明取值小了，需要提高取值，反之，降低取值。
#若对于最大容量每次增一，时间复杂度是 $O(NK)$,时间会超限，利用二分查找的方法，时间复杂度可以降到 $O(KlogN)$，N是capacity的变换区间，K是包裹数;
#初始capacity的最小值是最大包裹重量，最大值是包裹重量的总和，逐次遍历weights，更新left，mid，right，直到left与right重合；
#返回left。
