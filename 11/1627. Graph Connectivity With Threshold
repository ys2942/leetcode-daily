class UnionFind:
    def __init__(self, n):
        self.parents = list(range(n))
        
    def find(self, x):
        if x!=self.parents[x]:
            self.parents[x] = self.find(self.parents[x])
        return self.parents[x]
    
    def union(self, x, y):
        root_x, root_y = self.find(x), self.find(y)
        self.parents[root_x] = root_y

class Solution:
    def areConnected(self, n: int, threshold: int, queries: List[List[int]]) -> List[bool]:
        if threshold == 0:
            return [True]*len(queries)
        
        uf = UnionFind(n+1)
        for num in range(1, n+1):
            if num > threshold:
                curr = num
                while curr<=n:
                    uf.union(num, curr)
                    curr += num
                    
        return [uf.find(num1) == uf.find(num2) for num1, num2 in queries]
            
