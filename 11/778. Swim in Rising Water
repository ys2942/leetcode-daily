class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        n=len(grid)
        visited,pq=set((0,0)),[(grid[0][0],0,0)]
        res=0
        while pq:
            T,i,j=heapq.heappop(pq)
            res=max(res,T)
            directions=[(0,1),(0,-1),(1,0),(-1,0)]
            if i==j==n-1:
                break
            for dir in directions:
                x,y=i+dir[0],j+dir[1]
                if x<0 or x>n-1 or y<0 or y>n-1 or (x,y) in visited:
                    continue
                heapq.heappush(pq,(grid[x][y],x,y))
                visited.add((x,y))
        return res
    
#这个思路是，从左上角通往右下角的路径中，瓶颈是哪个呢？肯定是那个必经的道路上有个比较高的。所以，我们只要在做BFS时候，优先走比较矮的路，同时把最高的那个保存下来，就是结果。
#https://www.geeksforgeeks.org/heap-queue-or-heapq-in-python/
            
