class TrieNode:
    def __init__(self):
        self.children={}
        self.isEnd=False
        self.weight=0
        
class Trie:
    def __init__(self):
        self.root=TrieNode()
    def insert(self,word,t):
        node=self.root
        for c in word:
            if c not in node.children:
                node.children[c]=TrieNode()
            node=node.children[c]
        node.isEnd=True
        if t==-1:
            node.weight+=1
        else:
            node.weight=t
            
class AutocompleteSystem:
    def __init__(self, sentences: List[str], times: List[int]):
        self.trie=Trie()
        for s,t in zip(sentences, times):
            self.trie.insert(s,t)
        self.prefix=''
    def match(self,node,path):
        res=[]
        if node.isEnd:
            res.append((node.weight,path))
        for c in node.children:
            res.extend(self.match(node.children[c],path+c))
        return res
    def dfs(self,prefix):
        node=self.trie.root
        for c in prefix:
            if c not in node.children:
                return []
            node=node.children[c]
        allmatches=self.match(node,prefix)
        return [w[1] for w in sorted(allmatches, key=lambda x:(-x[0],x[1]))][:3]

    def input(self, c: str) -> List[str]:
        if c=='#':
            self.trie.insert(self.prefix,-1)
            self.prefix=''
            return []
        self.prefix+=c
        return self.dfs(self.prefix)
        


# Your AutocompleteSystem object will be instantiated and called as such:
# obj = AutocompleteSystem(sentences, times)
# param_1 = obj.input(c)
