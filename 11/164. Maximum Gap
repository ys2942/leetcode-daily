class Solution:
    def maximumGap(self, nums: List[int]) -> int:
        if len(nums) < 2:
            return 0
        max_num = max(nums)
        min_num = min(nums)
        if max_num == min_num:
            return 0
        interval = math.ceil((max_num - min_num)/(len(nums) - 1))
        buckets = [[None, None] for _ in range((max_num - min_num)//interval + 1)]
        for num in nums:
            bucket = buckets[(num-min_num)//interval]
            bucket[0] = min(bucket[0], num) if bucket[0] else num
            bucket[1] = max(bucket[1], num) if bucket[1] else num
        buckets = [b for b in buckets if b[0]]
        return max([buckets[i][0] - buckets[i-1][1] for i in range(1, len(buckets))])
    
#https://www.youtube.com/watch?v=qN0qvtFbCYw
#最关键的一点是，设数组中有n个元素，其中最大值为b，最小值为a，则排序后相邻两个元素的差值不会小于⌈(b-a) / (n-1)⌉！
#因此做法为，设置桶的大小为size = ⌈(b-a) / (n-1)⌉，那么桶的个数为(b-a) / size + 1；遍历数组，对每个桶记录其最大值和最小值；最后遍历一遍桶，最大的gap不会出现在桶的内部，而在桶之间，因此获得“后一个非空桶的最小值减前一个非空桶的最大值”的最大值，即为要求的值。
