class Solution:
    def longestAwesome(self, s: str) -> int:
        dic = collections.defaultdict(int)
        sequence = 0
        dic[0]=-1
        res = 1
        for i in range(len(s)):
            ch = ord(s[i]) - ord('0')
            sequence ^= (1<<ch)
            for j in range(10):
                next = sequence^(1<<j)
                if next in dic:
                    res = max(res, i-dic[next])
            if sequence not in dic:
                dic[sequence] = i
            else:
                res = max(res, i - dic[sequence])
        return res
#https://blog.csdn.net/qq_39445165/article/details/110730732

class Solution:
    def longestAwesome(self, s: str) -> int:
        idx = [-1] + [len(s)]*1023
        ans, mask = 0, 0
        for i, c in enumerate(s):
            mask ^= 1 << (ord(c) - ord('0'))
            ans = max([ans, i - idx[mask]] + [i - idx[mask ^ (1 << j)] for j in range(10)])
            idx[mask] = min(idx[mask], i)
        return ans
    #https://www.youtube.com/watch?v=b0oxAd94FOg
